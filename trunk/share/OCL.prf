(Injections
 (as_set_TCC1 0
  (as_set_TCC1-1 nil 3344327343 3344330505 ("" (subtype-tcc) nil nil)
   unfinished nil 194 130 nil nil))
 (set_to_sequence_TCC1 0
  (set_to_sequence_TCC1-1 nil 3344327343 3344329812
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil Injections nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   137 90 nil nil))
 (set_to_sequence_TCC2 0
  (set_to_sequence_TCC2-1 nil 3344327343 3344330576
   ("" (skosimp)
    (("" (use "card_rest[T]") (("" (assert) nil nil)) nil)) nil)
   proved
   ((card_rest formula-decl nil finite_sets nil)
    (T formal-type-decl nil Injections nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   19850 780 t nil))
 (as_sequence_TCC1 0
  (as_sequence_TCC1-1 nil 3344327343 3344330506
   ("" (existence-tcc) nil nil) unfinished nil 21 20 nil nil))
 (as_sequence_TCC2 0
  (as_sequence_TCC2-1 nil 3344327343 3344330506
   ("" (subtype-tcc) nil nil) unfinished nil 281 220 nil nil))
 (as_sequence_TCC3 0
  (as_sequence_TCC3-1 nil 3344327343 3344330506
   ("" (existence-tcc) nil nil) unfinished nil 31 30 nil nil))
 (as_bag_TCC1 0
  (as_bag_TCC1-1 nil 3344327343 3344329813 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil Injections nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (s!1 skolem-const-decl "finite_set[T]" Injections nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bag type-eq-decl nil bags "bags/") (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (is_finite const-decl "bool" finite_bags "bags/")
    (bag_to_set const-decl "set[T]" bags_to_sets "bags/"))
   463 310 nil nil))
 (as_bag_TCC2 0
  (as_bag_TCC2-1 nil 3344327343 3344330506 ("" (subtype-tcc) nil nil)
   unfinished nil 156 130 nil nil))
 (as_bag_TCC3 0
  (as_bag_TCC3-1 nil 3344327343 3344330727
   ("" (skolem-typepred)
    (("" (expand "is_finite")
      (("" (assert) (("" (postpone) nil nil)) nil)) nil))
    nil)
   unfinished nil 128671 1710 t nil)))
(Helpers
 (start_TCC1 0
  (start_TCC1-1 nil 3344329809 3344329815 ("" (subtype-tcc) nil nil)
   proved nil 11 10 nil nil))
 (start_TCC2 0
  (start_TCC2-1 nil 3344329809 3344329815 ("" (subtype-tcc) nil nil)
   proved nil 13 10 nil nil))
 (insert_at_TCC1 0
  (insert_at_TCC1-1 nil 3344329809 3344329815
   ("" (subtype-tcc) nil nil) proved nil 15 10 nil nil))
 (excluding_TCC1 0
  (excluding_TCC1-1 nil 3344329809 3344329815
   ("" (subtype-tcc) nil nil) proved nil 78 50 nil nil))
 (excluding_TCC2 0
  (excluding_TCC2-1 nil 3344329809 3344329815
   ("" (subtype-tcc) nil nil) proved nil 122 80 nil nil))
 (excluding_TCC3 0
  (excluding_TCC3-1 nil 3344329809 3344330507
   ("" (skolem-typepred)
    (("" (prop)
      (("" (expand "^")
        (("" (lift-if)
          (("" (split)
            (("1" (prop)
              (("1" (expand "empty_seq") (("1" (assert) nil nil)) nil)
               ("2" (expand "empty_seq") (("2" (assert) nil nil)) nil))
              nil)
             ("2" (prop)
              (("2" (expand "min")
                (("2" (assert)
                  (("2" (expand ">=")
                    (("2" (assert)
                      (("2" (lazy-grind)
                        (("2" (typepred "s!1`length")
                          (("2" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 489 410 t nil))
 (excluding_TCC4 0
  (excluding_TCC4-1 nil 3344329809 3344329816
   ("" (subtype-tcc) nil nil) proved nil 76 70 nil nil))
 (excluding_TCC5 0
  (excluding_TCC5-1 nil 3344329809 3344330508
   ("" (skosimp)
    (("" (expand "^")
      (("" (lift-if)
        (("" (expand "min")
          (("" (split)
            (("1" (prop)
              (("1" (expand "empty_seq") (("1" (assert) nil nil)) nil)
               ("2" (expand "empty_seq") (("2" (assert) nil nil)) nil))
              nil)
             ("2" (prop)
              (("2" (assert)
                (("2" (typepred "s!1`length")
                  (("2" (postpone) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 429 380 t nil)))
(Flatten
 (flatten_TCC1 0
  (flatten_TCC1-1 nil 3344327465 3344329810 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil Flatten nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   203 130 nil nil))
 (flatten_TCC2 0
  (flatten_TCC2-1 nil 3344327465 3344330241
   (""
    (apply (then (skosimp) (use "card_rest[finite_set[T]]") (assert)))
    nil nil)
   proved
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil Flatten nil)
    (card_rest formula-decl nil finite_sets nil))
   85782 1210 t nil))
 (flatten_TCC3 0
  (flatten_TCC3-1 nil 3344327465 3344329811 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil Flatten nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   48 30 nil nil))
 (flatten_TCC4 0
  (flatten_TCC4-1 nil 3344327465 3344330346
   ("" (skosimp)
    (("" (use "card_rest[finite_sequence[T]]") (("" (assert) nil nil))
      nil))
    nil)
   proved
   ((card_rest formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil Flatten nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   96482 2510 t nil))
 (flatten_TCC5 0
  (flatten_TCC5-1 nil 3344327465 3344330385
   ("" (skosimp)
    (("" (use "card_bag_rest[finite_bag[T]]" ("b" "s!1"))
      (("" (assert) nil nil)) nil))
    nil)
   proved
   ((card_bag_rest formula-decl nil finite_bags_aux "bags/")
    (T formal-type-decl nil Flatten nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bag type-eq-decl nil bags "bags/")
    (is_finite const-decl "bool" finite_bags "bags/")
    (finite_bag type-eq-decl nil finite_bags "bags/"))
   30306 600 t nil)))
(Iterate
 (iterate_TCC1 0
  (iterate_TCC1-1 nil 3344327484 3344329813 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil Iterate nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   39 30 nil nil))
 (iterate_TCC2 0
  (iterate_TCC2-1 nil 3344327484 3344330435
   ("" (skosimp)
    (("" (use "card_rest[T]") (("" (assert) nil nil)) nil)) nil)
   proved
   ((card_rest formula-decl nil finite_sets nil)
    (T formal-type-decl nil Iterate nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   13755 610 t nil))
 (iter_TCC1 0
  (iter_TCC1-1 nil 3344327484 3344329814 ("" (subtype-tcc) nil nil)
   proved nil 61 60 nil nil))
 (iter_TCC2 0
  (iter_TCC2-1 nil 3344327484 3344329814 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil Iterate nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil nat_types nil))
   282 260 nil nil))
 (iter_TCC3 0
  (iter_TCC3-1 nil 3344327484 3344329814 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil Iterate nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil nat_types nil))
   107 50 nil nil))
 (iter_TCC4 0
  (iter_TCC4-1 nil 3344327484 3344329814 ("" (termination-tcc) nil nil)
   proved nil 75 70 nil nil))
 (iterate_TCC3 0
  (iterate_TCC3-1 nil 3344327484 3344329814 ("" (subtype-tcc) nil nil)
   proved nil 29 30 nil nil))
 (iterate_TCC4 0
  (iterate_TCC4-1 nil 3344327484 3344330477
   ("" (skosimp)
    (("" (use "card_bag_rest[T]" ("b" "s!1")) (("" (assert) nil nil))
      nil))
    nil)
   proved
   ((card_bag_rest formula-decl nil finite_bags_aux "bags/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bag type-eq-decl nil bags "bags/")
    (is_finite const-decl "bool" finite_bags "bags/")
    (finite_bag type-eq-decl nil finite_bags "bags/")
    (T formal-type-decl nil Iterate nil))
   31495 1370 t nil)))
(OCL)

